#!/usr/bin/env python
from geometry_msgs.msg import Quaternion, Pose, Point, Vector3
from std_msgs.msg import Header, ColorRGBA
from visualization_msgs.msg import Marker
import math
import rospy

# Libraries for gripper commands
import roslib; roslib.load_manifest('robotiq_s_model_control')
from robotiq_s_model_control.msg import _SModel_robot_output  as outputMsg


def wait_for_time():
    """Wait for simulated time to begin.
    """
    while rospy.Time().now().to_sec() == 0:
        pass

class ObjectViz(object):
    

    def __init__(self, marker_pub):
        self._object_pose    = []
        self._marker_pub     = marker_pub
        self._gripper_status = -1
        rospy.on_shutdown(self.shutdown)


    def gripperStatus(self, status):
        """Print the status string generated by the statusInterpreter function."""
        self._gripper_status = status.rPRA


    def callback(self, msg):
        point = msg.position
        self._object_pose = point;
        self.viz_cube()

    def viz_cube(self):
       marker = Marker()
       marker.header.frame_id = "/world"
       marker.type = marker.CUBE
       marker.action = marker.ADD
       marker.scale.x = 0.025
       marker.scale.y = 0.025
       marker.scale.z = 0.025
       marker.color.a = 1.0
       if self._gripper_status != -1: 
            if self._gripper_status == 0:
                marker.color.r = 0.5
                marker.color.g = 0.5
                marker.color.b = 0.5
            elif self._gripper_status == 255:
                marker.color.r = 0.0
                marker.color.g = 1.0
                marker.color.b = 0.0
            marker.pose.orientation.w = 1.0
            marker.pose.position.x = self._object_pose.x
            marker.pose.position.y = self._object_pose.y
            marker.pose.position.z = self._object_pose.z - 0.025
            self._marker_pub.publish(marker)
    
    def shutdown(self):
        """
        command executed after Ctrl+C is pressed
        """
        rospy.loginfo("Stop Trajectory Viz Node")
        rospy.sleep(1)

def main():
    rospy.init_node('obj_viz')
    wait_for_time()
    marker_publisher = rospy.Publisher('object_marker', Marker, queue_size=5)
    
    objectViz = ObjectViz(marker_publisher)
    rospy.Subscriber('/lwr/ee_pose', Pose, objectViz.callback)
    rospy.Subscriber('SModelRobotOutput', outputMsg.SModel_robot_output, objectViz.gripperStatus)
    rospy.spin()

    rospy.loginfo('Running until shutdown (Ctrl-C).')
    while not rospy.is_shutdown():
       objectViz.shutdown()
       rospy.sleep(0.5)

    rospy.loginfo('Node finished')


if __name__ == '__main__':
    main()